#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_MCAP <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = mcap_sensitivityv1.4, color = MCAP_status_sens)) +
geom_point(size = 0.6, alpha = 0.8) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_MCAP
finalData %>%
group_by(status_raw) %>%
summarise(count = n())
finalData %>%
group_by(status_sens) %>%
summarise(count = n())
finalData %>%
group_by(MCAP_status_raw) %>%
summarise(count = n())
finalData %>%
group_by(MCAP_status_sens) %>%
summarise(count = n())
## Data load
#-------------------------------------------------------------------------------
cancermutData <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/cancermuts/jan2022/metatable.csv",
header = TRUE))
colnames(cancermutData)
## Data wrangle
#-------------------------------------------------------------------------------
# Select relevant columns and make row for each genomic mutation
data <- cancermutData %>%
select(X,
Position,
WT.residue,
Mutated.residue,
Revel.score,
Genomic.mutation) %>%
separate_rows(Genomic.mutation, sep = ", ") # Convert list into sep rows
## Does hgvs DNA format cover only SNVs?
#-------------------------------------------------------------------------------
# Regex: "hg\\d{2}[^:]*:g\\.\\d+[ATCG]>[ATCG]"
# Extraxt all formats not following hgvs DNA format (or empty)
filter(data,
!str_detect(Genomic.mutation, "hg\\d{2}[^:]*:g\\.\\d+[ATCG]>[ATCG]") & Genomic.mutation != "") %>%
print(n = 100L)
## Data wrangle
#-------------------------------------------------------------------------------
data_wrangled <- data %>% filter(str_detect(Genomic.mutation, "hg\\d{2}[^:]*:g\\.\\d+[ATCG]>[ATCG]")) %>%
mutate(genome = str_extract(Genomic.mutation, "hg\\d{2}"),
chromosome = str_sub(str_extract(Genomic.mutation, ",[^:|\\.]*"), start=2),
position = as.integer(str_sub(str_extract(Genomic.mutation, ":g\\.\\d+"), start=4)),
ref.base = str_sub(str_extract(Genomic.mutation, "[ATCG]>"), end=-2),
mut.base = str_sub(str_extract(Genomic.mutation, ">[ATCG]"), start=2),
prot.Position = Position,
cancermuts.index = X) %>%
select(Genomic.mutation, genome, chromosome, position, ref.base, mut.base, WT.residue, Mutated.residue, prot.Position, Revel.score, cancermuts.index)
# hg38,17:g.7676587T>C
# Convert from hg39 to hg19 genome assembly
hg38_data <- data_wrangled %>% dplyr::filter(genome == "hg38")
path = system.file(package="liftOver", "extdata", "hg38ToHg19.over.chain")
ch = import.chain(path)
grs = GRanges(seqnames=str_c("chr", dplyr::pull(hg38_data, chromosome)),
ranges=IRanges(start=dplyr::pull(hg38_data, position), end=dplyr::pull(hg38_data, position)),
strand=rep('+', dim(hg38_data)[1]))
library(liftOver)
select <- dplyr::select
filter <- dplyr::filter
## Data load
#-------------------------------------------------------------------------------
cancermutData <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/cancermuts/jan2022/metatable.csv",
header = TRUE))
## Data wrangle
#-------------------------------------------------------------------------------
# Select relevant columns and make row for each genomic mutation
data <- cancermutData %>%
select(X,
Position,
WT.residue,
Mutated.residue,
Revel.score,
Genomic.mutation) %>%
separate_rows(Genomic.mutation, sep = ", ") # Convert list into sep rows
## Does hgvs DNA format cover only SNVs?
#-------------------------------------------------------------------------------
# Regex: "hg\\d{2}[^:]*:g\\.\\d+[ATCG]>[ATCG]"
# Extraxt all formats not following hgvs DNA format (or empty)
filter(data,
!str_detect(Genomic.mutation, "hg\\d{2}[^:]*:g\\.\\d+[ATCG]>[ATCG]") & Genomic.mutation != "") %>%
print(n = 100L)
## Data wrangle
#-------------------------------------------------------------------------------
data_wrangled <- data %>% filter(str_detect(Genomic.mutation, "hg\\d{2}[^:]*:g\\.\\d+[ATCG]>[ATCG]")) %>%
mutate(genome = str_extract(Genomic.mutation, "hg\\d{2}"),
chromosome = str_sub(str_extract(Genomic.mutation, ",[^:|\\.]*"), start=2),
position = as.integer(str_sub(str_extract(Genomic.mutation, ":g\\.\\d+"), start=4)),
ref.base = str_sub(str_extract(Genomic.mutation, "[ATCG]>"), end=-2),
mut.base = str_sub(str_extract(Genomic.mutation, ">[ATCG]"), start=2),
prot.Position = Position,
cancermuts.index = X) %>%
select(Genomic.mutation, genome, chromosome, position, ref.base, mut.base, WT.residue, Mutated.residue, prot.Position, Revel.score, cancermuts.index)
# hg38,17:g.7676587T>C
# Convert from hg39 to hg19 genome assembly
hg38_data <- data_wrangled %>% dplyr::filter(genome == "hg38")
path = system.file(package="liftOver", "extdata", "hg38ToHg19.over.chain")
ch = import.chain(path)
grs = GRanges(seqnames=str_c("chr", dplyr::pull(hg38_data, chromosome)),
ranges=IRanges(start=dplyr::pull(hg38_data, position), end=dplyr::pull(hg38_data, position)),
strand=rep('+', dim(hg38_data)[1]))
seqlevelsStyle(grs) = "UCSC"  # https://bioconductor.org/packages/devel/workflows/vignettes/liftOver/inst/doc/liftov.html
convs = liftOver(grs, ch)
# Add converted chr and position
convs_19 <- as.data.frame(unlist(convs))
hg38_to_hg19_data <- hg38_data %>%
mutate(chromosome = str_replace(pull(convs_19, seqnames), "chr", ""),
position = pull(convs_19, start),
genome = "hg19")
# Print failed conversions if any
message("### The percentage of failed hg38 --> hg19 conversions: ",
(dim(hg38_data)[1]-dim(convs_19)[1])/dim(hg38_data)[1]*100,
" %")
# Add back to original data
output_data <- data_wrangled %>%
filter(genome != "hg38") %>%
bind_rows(hg38_to_hg19_data) %>%
select(-Genomic.mutation, -genome) %>%
unique()
# Write output
write_csv(output_data, "/data/user/shared_projects/p53_jmb_2021/CScape/results/cancermuts_converted_hg19.csv")
## Data load
#-------------------------------------------------------------------------------
CScapeOutput <- tibble(fread("/data/user/shared_projects/p53_jmb_2021/CScape/results/CScape_results.csv", sep = "\t", skip = "Chromosome"))
cancermutData <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/CScape/results/cancermuts_converted_hg19.csv",
header = TRUE))
mutation_MCAP <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/M-CAP/results/data_MCAP_scores.csv",
header = TRUE))
## Data wrangle
#-------------------------------------------------------------------------------
# Join meta data onto CScape results
finalData <- CScapeOutput %>%
rename(Chromosome = `# Chromosome`) %>%
mutate(Reference = as.factor(Reference),
Mutant = as.factor(Mutant)) %>%
left_join(cancermutData, by = c("Chromosome" = "chromosome",
"Position" = "position",
"Reference" = "ref.base",
"Mutant" = "mut.base")) %>%
unique() %>%
left_join(mutation_MCAP, by = c("Chromosome" = "chromosome",
"Position" = "position",
"Reference" = "ref.base",
"Mutant" = "mut.base",
"WT.residue",
"Mutated.residue",
"prot.Position",
"cancermuts.index")) %>%
mutate(MCAP_status_raw = case_when(mcapv1.4 >= 0.025 ~ "pathogenic",
mcapv1.4 < 0.025 ~ "possibly benign"),
MCAP_status_sens = case_when(mcap_sensitivityv1.4 <= 0.95 ~ "pathogenic",
mcap_sensitivityv1.4 > 0.95 ~ "possibly benign")) %>%
mutate(Revel_status = case_when(Revel.score > 0.4 ~ "pathogenic",
Revel.score <= 0.4 ~ "neutral"))
## Data load
#-------------------------------------------------------------------------------
CScapeOutput <- tibble(fread("/data/user/shared_projects/p53_jmb_2021/CScape/results/CScape_results.csv", sep = "\t", skip = "Chromosome"))
cancermutData <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/CScape/results/cancermuts_converted_hg19.csv",
header = TRUE))
mutation_MCAP <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/M-CAP/results/data_MCAP_scores.csv",
header = TRUE))
CScapeOutput
## Data wrangle
#-------------------------------------------------------------------------------
# Join meta data onto CScape results
finalData <- CScapeOutput %>%
rename(Chromosome = `# Chromosome`) %>%
mutate(Reference = as.factor(Reference),
Mutant = as.factor(Mutant)) %>%
left_join(cancermutData, by = c("Chromosome" = "chromosome",
"Position" = "position",
"Reference" = "ref.base",
"Mutant" = "mut.base")) %>%
unique() %>%
left_join(mutation_MCAP, by = c("Chromosome" = "chromosome",
"Position" = "position",
"Reference" = "ref.base",
"Mutant" = "mut.base",
"WT.residue",
"Mutated.residue",
"prot.Position",
"cancermuts.index")) %>%
mutate(MCAP_status_raw = case_when(mcapv1.4 >= 0.025 ~ "pathogenic",
mcapv1.4 < 0.025 ~ "possibly benign"),
MCAP_status_sens = case_when(mcap_sensitivityv1.4 <= 0.95 ~ "pathogenic",
mcap_sensitivityv1.4 > 0.95 ~ "possibly benign")) %>%
mutate(Revel_status = case_when(Revel.score > 0.4 ~ "pathogenic",
Revel.score <= 0.4 ~ "neutral"))
CScapeOutput %>%
rename(Chromosome = `# Chromosome`)
CScapeOutput
CScapeOutput %>%
rename(Chromosome = `# Chromosome`)
## Prework
#-------------------------------------------------------------------------------
library(tidyverse)
library(data.table)
library(plotly)
CScapeOutput %>%
rename(Chromosome = `# Chromosome`)
ls(rm = ls())
rm(list = ls())
## Prework
#-------------------------------------------------------------------------------
library(tidyverse)
library(data.table)
library(plotly)
## Data load
#-------------------------------------------------------------------------------
CScapeOutput <- tibble(fread("/data/user/shared_projects/p53_jmb_2021/CScape/results/CScape_results.csv", sep = "\t", skip = "Chromosome"))
cancermutData <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/CScape/results/cancermuts_converted_hg19.csv",
header = TRUE))
mutation_MCAP <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/M-CAP/results/data_MCAP_scores.csv",
header = TRUE))
CScapeOutput %>%
rename(Chromosome = `# Chromosome`)
CScapeOutput
CScapeOutput %>%
rename(Chromosome = `# Chromosome`)
colnames(CScapeOutput)
CScapeOutput %>%
rename(Chromosome = "# Chromosome")
CScapeOutput %>%
rename(Chromosome = '# Chromosome')
CScapeOutput %>%
rename(Chromosome = '# Chromosome')
CScapeOutput
CScapeOutput %>%
rename(Chromosome = `# Chromosome`)
group_by(Revel_status) %>%
summarise(count = n())
## Prework
#-------------------------------------------------------------------------------
library(tidyverse)
library(data.table)
library(plotly)
## Data load
#-------------------------------------------------------------------------------
CScapeOutput <- tibble(fread("/data/user/shared_projects/p53_jmb_2021/CScape/results/CScape_results.csv", sep = "\t", skip = "Chromosome"))
cancermutData <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/CScape/results/cancermuts_converted_hg19.csv",
header = TRUE))
mutation_MCAP <- tibble(read.csv("/data/user/shared_projects/p53_jmb_2021/M-CAP/results/data_MCAP_scores.csv",
header = TRUE))
## Data wrangle
#-------------------------------------------------------------------------------
# Join meta data onto CScape results
finalData <- CScapeOutput %>%
rename(Chromosome = `# Chromosome`) %>%
mutate(Reference = as.factor(Reference),
Mutant = as.factor(Mutant)) %>%
left_join(cancermutData, by = c("Chromosome" = "chromosome",
"Position" = "position",
"Reference" = "ref.base",
"Mutant" = "mut.base")) %>%
unique() %>%
left_join(mutation_MCAP, by = c("Chromosome" = "chromosome",
"Position" = "position",
"Reference" = "ref.base",
"Mutant" = "mut.base",
"WT.residue",
"Mutated.residue",
"prot.Position",
"cancermuts.index")) %>%
unique() %>%
mutate(MCAP_status_raw = case_when(mcapv1.4 >= 0.025 ~ "pathogenic",
mcapv1.4 < 0.025 ~ "possibly benign"),
MCAP_status_sens = case_when(mcap_sensitivityv1.4 <= 0.95 ~ "pathogenic",
mcap_sensitivityv1.4 > 0.95 ~ "possibly benign")) %>%
mutate(Revel.score = as.numeric(levels(Revel.score)[Revel.score]),
Revel_status = case_when(Revel.score > 0.4 ~ "pathogenic",
Revel.score <= 0.4 ~ "neutral"))
## Summarise outputs
#-------------------------------------------------------------------------------
# CScape
finalData %>%
group_by(Remark) %>%
summarise(count = n())
# MCAP
finalData %>%
group_by(MCAP_status_raw) %>%
summarise(count = n())
finalData %>%
group_by(MCAP_status_sens) %>%
summarise(count = n())
# Revel
finalData %>%
select(WT.residue, Mutated.residue, prot.Position, )
# Revel
finalData %>%
select(WT.residue, Mutated.residue, prot.Position, Revel.score, Revel_status) %>%
group_by(Revel_status) %>%
summarise(count = n())
p_Revel <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Revel.score, color = MCAP_status_sens)) +
geom_point(size = 0.6, alpha = 0.8) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_color_manual(values = c(pathogenic = "red", neutral = "green", NA = "yellow"))
finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Revel.score, color = MCAP_status_sens)) +
geom_point(size = 0.6, alpha = 0.8) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_Revel <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Revel.score, color = MCAP_status_sens)) +
geom_point(size = 0.6, alpha = 0.8) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_color_manual(values = c(pathogenic = "red", neutral = "green", NA = "yellow"))
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_Revel <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Revel.score, color = MCAP_status_sens)) +
geom_point(size = 0.6, alpha = 0.8) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
scale_color_manual(values = c(pathogenic = "red", neutral = "green", NA = "yellow")) +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_Revel <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Revel.score, color = MCAP_status_sens)) +
geom_point(size = 0.6, alpha = 0.8) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
scale_color_manual(values=c(pathogenic = "red", neutral = "green")) +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_Revel
p_CScape
p_CScape <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Coding, color = Remark)) +
geom_point(size = 0.6, alpha = 0.8) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("Driver score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_CScape
p_CScape <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Coding, color = Remark)) +
geom_point(size = 0.6, alpha = 0.8) +
scale_color_manual(values=c(High-confidence = "red", Low-confidence = "blue", Neutral = "green")) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("Driver score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_CScape <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Coding, color = Remark)) +
geom_point(size = 0.6, alpha = 0.8) +
scale_color_manual(values=c(High-confidence = "red", Low-confidence = "blue", Neutral = "green")) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("Driver score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_CScape
## Summarise outputs
#-------------------------------------------------------------------------------
# CScape
finalData %>%
group_by(Remark) %>%
summarise(count = n())
p_CScape <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Coding, color = Remark)) +
geom_point(size = 0.6, alpha = 0.8) +
scale_color_manual(values=c("High-confidence" = "red", "Low-confidence" = "blue", "Neutral" = "green")) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("Driver score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_CScape
p_CScape <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Coding, color = Remark)) +
geom_point(size = 0.6, alpha = 0.8) +
scale_color_manual(values=c("High-confidence" = "red", "Low-confidence" = "blue", "Neutral" = "forestgreen")) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("Driver score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_CScape
# MCAP
finalData %>%
group_by(MCAP_status_raw) %>%
summarise(count = n())
p_MCAP <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = mcap_sensitivityv1.4, color = MCAP_status_sens)) +
geom_point(size = 0.6, alpha = 0.8) +
scale_color_manual(values=c("pathogenic" = "red", "possibly benign" = "forestgreen")) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_MCAP
p_CScape <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Coding, color = Remark)) +
geom_point(size = 0.6, alpha = 0.8) +
scale_color_manual(values=c("High-confidence" = "red", "Low-confidence" = "blue", "Neutral" = "forestgreen")) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("Driver score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_CScape
p_MCAP <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = mcap_sensitivityv1.4, color = MCAP_status_sens)) +
geom_point(size = 0.6, alpha = 0.8) +
scale_color_manual(values=c("pathogenic" = "red", "possibly benign" = "forestgreen")) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_MCAP
p_Revel <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Revel.score, color = MCAP_status_sens)) +
geom_point(size = 0.6, alpha = 0.8) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
scale_color_manual(values=c(pathogenic = "red", neutral = "forestgreen")) +
xlab("Protein mutation") + ylab("M-CAP sensitivity score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_Revel
p_Revel <- finalData %>%
unite(mutation, c(Chromosome, Position, Reference, Mutant), sep=",") %>%
unite(Protein, c(prot.Position, WT.residue, Mutated.residue), sep=",") %>%
#mutate(mutation = fct_reorder(Protein, desc(Coding))) %>%
ggplot(mapping = aes(x = Protein, y = Revel.score, color = Revel_status)) +
geom_point(size = 0.6, alpha = 0.8) +
#geom_hline(yintercept = MCAP_threshold, linetype = "dashed", color = "red") +
scale_color_manual(values=c(pathogenic = "red", neutral = "forestgreen")) +
xlab("Protein mutation") + ylab("Revel score") +
theme_light() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
p_Revel
p_CScape
p_MCAP
p_Revel
